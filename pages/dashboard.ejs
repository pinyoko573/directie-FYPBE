<!DOCTYPE html>
<html lang="en">

<%- include partials/head.ejs %>

    <body>
        <div id="wrapper">
            <%- include partials/header.ejs %>
                <div id="page-wrapper">
                    <div class="container-fluid">
                        <div class="row">
                            <div class="col-lg-12">
                                <h1 class="page-header">Dashboard</h1>
                            </div>
                        </div>
                    </div>
                    <div class="row">
                        <!-- Dashboard -->
                        <div class="col-lg-3 col-md-6">
                            <div class="panel panel-primary">
                                <div class="panel-heading">
                                    <div class="row">
                                        <div class="col-xs-3">
                                            <i class="fa fa-calendar fa-5x"></i>
                                        </div>
                                        <div class="col-xs-9 text-right">
                                            <div class="huge"></div>
                                            <div>Total Trips</div>
                                        </div>
                                    </div>
                                </div>

                            </div>
                        </div>
                        <div class="col-lg-3 col-md-6">
                            <div class="panel panel-yellow">
                                <div class="panel-heading">
                                    <div class="row">
                                        <div class="col-xs-3">
                                            <i class="fa fa-map fa-5x"></i>
                                        </div>
                                        <div class="col-xs-9 text-right">
                                            <div class="huge"></div>
                                            <div>Trips Today</div>
                                        </div>
                                    </div>
                                </div>

                            </div>
                        </div>
                        <div class="col-lg-3 col-md-6">
                            <div class="panel panel-green">
                                <div class="panel-heading">
                                    <div class="row">
                                        <div class="col-xs-3">
                                            <i class="fa fa-check fa-5x"></i>
                                        </div>
                                        <div class="col-xs-9 text-right">
                                            <div class="huge"></div>
                                            <div>Completed Routes</div>
                                        </div>
                                    </div>
                                </div>

                            </div>
                        </div>
                        <div class="col-lg-3 col-md-6">
                            <div class="panel panel-red">
                                <div class="panel-heading">
                                    <div class="row">
                                        <div class="col-xs-3">
                                            <i class="fa fa-times fa-5x"></i>
                                        </div>
                                        <div class="col-xs-9 text-right">
                                            <div class="huge"></div>
                                            <div>Incompleted Routes</div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    <!-- Route Overview -->
                    <div class="row">
                        <div class="col-lg-6">
                            <div class="panel panel-default">
                                <div class="panel-heading">
                                    <i class="fa fa-bar-chart-o fa-fw"></i> Route Overview
                                </div>
                                <div class="input-group">
                                    <input type="text" class="form-control" id="inputDateStart">
                                    <div class="input-group-addon">to</div>
                                    <input type="text" class="form-control" id="inputDateEnd">
                                </div>
                                <div class="panel-body">
                                    <div id="linechart"></div>
                                </div>
                            </div>
                        </div>
                        <div class="col-lg-6">
                            <div class="panel panel-default">
                                <div class="panel-heading">
                                    <i class="fa fa-bar-chart-o fa-fw"></i> Statistics on Usage of Application By Age
                                </div>
                                <div class="panel-body">
                                    <div id="barchart"></div>
                                </div>
                            </div>
                        </div>
                        <div class="col-lg-12">
                            <div class="panel panel-default">
                                <div class="panel-heading">
                                    <i class="fa fa-table fa-fw"></i> Route Table Overview
                                </div>
                                <div class="panel-body">
                                    <table id="routeTable" class="table table-striped table-bordered"></table>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
    </body>

</html>

<script>
    //client will utilize the data from server and get what values it needs to plot the graph
    var timestampData = <%-JSON.stringify(timestampData)%>;
    var userData = <%-JSON.stringify(userData)%>;

    var totalRoutesData = [], requestedData;
    var today = new Date();
    var chart, barchart;
    //google charts options
    var options = {
        width: '100%',
        height: '345',
        chartArea: {
            width: '80%',
            height: '85%',
            left: 18,
            top: 20
        },
        series: {
            0: { color: '#337ab7' },
            1: { color: '#5cb85c' },
            2: { color: '#d9534f' }
        },
        hAxis: {
            viewWindow: {
                min: new Date(today.getFullYear(), today.getMonth(), today.getDate(), 0),
                max: new Date(today.getFullYear(), today.getMonth(), today.getDate(), 24),
            },
            gridlines: {
                count: -1
            }
        },
        vAxis: {
            format: '#',
            viewWindow: {
                min: 0
            },
            gridlines: {
                count: -1
            }
        }
    }
    var barOptions = {
        width: '100%',
        height: '345',
        legend: { position: 'right' },
        chartArea: {
            width: '75%',
            height: '85%',
            left: 18,
            top: 20
        },
        series: {
            0: { color: '#d9534f' },
            1: { color: '#5cb85c' }
        },
        vAxis: {
            format: '#',
            gridlines: {
                count: -1
            }
        }
    }
    loadRouteData();
    //This function loads both charts and the 4 icons on top. it does not load the table
    google.charts.load('current', { 'packages': ['corechart', 'line'] });
    google.charts.setOnLoadCallback(initChartAndTable);

    function loadRouteData() {
        var tripsToday = 0, completedRoutes = 0, incompletedRoutes = 0;

        //reformat the data so it has datetime and count
        for (index = 0; index < timestampData.length; index++) {
            oneRoute = timestampData[index];

            //Count the trips today ICON
            if (moment(oneRoute.startTime).format('DD-MM-YYYY') == moment(new Date()).format('DD-MM-YYYY')) {
                tripsToday++;
            }
            //Count the trips completed ICON
            if (oneRoute.routeCompleted) {
                completedRoutes++;
            }
            else {
                //Count the trips incompleted ICON
                incompletedRoutes++;
            }

            //Initialize the first record
            if (index == 0) {
                totalRoutesData.push([moment(oneRoute.startTime).minutes(0).seconds(0).toDate(), 1, oneRoute.routeCompleted ? 1 : 0, !oneRoute.routeCompleted ? 1 : 0]);
            }
            //If the previous record exists
            else {
                //Check if the date and hour is the same as previous
                //If it is the same, add one value to the counter
                //If not, push another new record
                if (moment(totalRoutesData[totalRoutesData.length - 1][0]).format('DD-MM-YYYY HH') == moment(oneRoute.startTime).format('DD-MM-YYYY HH')) {
                    totalRoutesData[totalRoutesData.length - 1][1] += 1;
                    if (oneRoute.routeCompleted) {
                        totalRoutesData[totalRoutesData.length - 1][2] += 1;
                    }
                    else {
                        totalRoutesData[totalRoutesData.length - 1][3] += 1;
                    }
                }
                else {
                    totalRoutesData.push([moment(oneRoute.startTime).minutes(0).seconds(0).toDate(), 1, oneRoute.routeCompleted ? 1 : 0, !oneRoute.routeCompleted ? 1 : 0]);
                }
            }
        }

        //Insert the counters inside the div
        $('.huge:eq(0)').text(Object.keys(timestampData).length);
        $('.huge:eq(1)').text(tripsToday);
        $('.huge:eq(2)').text(completedRoutes);
        $('.huge:eq(3)').text(incompletedRoutes);
    }

    function initChartAndTable() {
        //INITALIZE CHART AND DATE PICKER
        //Initialize line chart data
        routeData = new google.visualization.DataTable();
        routeData.addColumn('datetime', 'Time of Day');
        routeData.addColumn('number', 'Total Routes');
        routeData.addColumn('number', 'Success Routes');
        routeData.addColumn('number', 'Failed Routes');
        routeData.addRows(totalRoutesData);

        //if today and today, then min TODAY 0hrs, max 24hrs, count -1
        chart = new google.visualization.LineChart(document.getElementById('linechart'));
        chart.draw(routeData, options);

        var datePickerOptions = {
            startDate: totalRoutesData[0][0],
            endDate: new Date(today.getFullYear(), today.getMonth(), today.getDate()),
            autoclose: true
        }

        //Initialize date picker with these options
        $('#inputDateStart').datepicker(datePickerOptions);
        $('#inputDateEnd').datepicker(datePickerOptions);

        //set date picker to today, can't set in the options
        $('#inputDateStart').datepicker('setDate', new Date(today.getFullYear(), today.getMonth(), today.getDate()));
        $('#inputDateEnd').datepicker('setDate', new Date(today.getFullYear(), today.getMonth(), today.getDate()));

        //Events when date picker is clicked
        $('#inputDateStart').datepicker().change('hide', function (e) {
            if ($('#inputDateEnd').datepicker('getDate') < $('#inputDateStart').datepicker('getDate')) {
                $('#inputDateEnd').datepicker('setDate', $('#inputDateStart').datepicker('getDate'));
                $('#inputDateEnd').datepicker('setStartDate', $('#inputDateStart').datepicker('getDate'));
            }
            else {
                $('#inputDateEnd').datepicker('setStartDate', $('#inputDateStart').datepicker('getStartDate'));
            }
            $('#inputDateEnd').datepicker('show');
        });

        $('#inputDateStart').datepicker().change('changeDate', function (e) {
            redrawChart($('#inputDateStart').datepicker('getDate'), $('#inputDateEnd').datepicker('getDate'));
        });

        $('#inputDateEnd').datepicker().change('changeDate', function (e) {
            if ($('#inputDateEnd').datepicker('getDate') < $('#inputDateStart').datepicker('getDate')) {
                $('#inputDateStart').datepicker('setDate', $('#inputDateEnd').datepicker('getDate'));
            }

            redrawChart($('#inputDateStart').datepicker('getDate'), $('#inputDateEnd').datepicker('getDate'));
        })

        //INITALIZE TABLE
        requestedData = loadTableData();
        $('#routeTable').DataTable({
            data: requestedData,
            columns: [
                { data: 'Origin', title: 'Origin' },
                { data: 'Destination', title: 'Destination' },
                {
                    data: 'startTime', render: function (data, type, row) {
                        return moment(data).format('HH:mm:ss')
                    }, title: 'Start'
                },
                {
                    data: null, render: function (data, type, row) {
                        duration = moment.duration(moment(data.endTime).diff(moment(data.startTime)));
                        return parseInt(duration.asMinutes()) + "m " + parseInt(duration.asSeconds() % 60) + "s";
                    }, title: 'Duration'
                },
                {
                    data: null, render: function (data, type, row) {
                        return data.Nodes.length + 1 + "/" + data.Beacons.length
                    }, title: 'Pts Reached'
                },
                {
                    data: null, render: function (data, type, row) {
                        return data.routeCompleted ? "&#x2713;" : "&#x2717;"
                    }, title: 'Completed'
                },
                {
                    data: 'User', render: function (data, type, row) {
                        return getAge(userData[data].dateOfBirth);
                    }, title: 'User Age'
                },
                {
                    data: null, render: function (data, type, full, meta) {
                        return '<button class="infoButton btn btn-primary" data-id="' + meta.row + '">Details</button>';
                    }, title: 'Action'
                },
            ],
            searching: false,
            bInfo: false
        });

        //INIT TABLE BUTTONS
        $('#routeTable').off().on('click', '.infoButton', function (e) {
            var clickedRouteId = $(this).data('id');
            var clickedRouteData = requestedData[clickedRouteId];

            showAjaxLoading();
            $.alert({
                columnClass: 'col-md-8 col-md-offset-2',
                title: 'Route Details',
                content: '<table id="routeInfo1"><tr><td>Origin</td><td id="origin"></td><td>Destination</td><td id="destination"></td></tr><tr><td>Start Time</td><td id="starttime"></td><td>End Time</td><td id="endtime"></td></tr><tr><td>User Name</td><td id="name"></td></tr><tr><td>User Age</td><td id="age"></td></tr></table><table id="routeInfo2"><tr><td>User Path</td><td id="nodes"></td></tr><tr><td>Calculated Path</td><td id="beacons"></td></tr></table><div id="nodechart"></div><table id="routeNodes"></table>',
                onContentReady: function () {
                    $('#origin').text(clickedRouteData.Origin);
                    $('#destination').text(clickedRouteData.Destination);
                    $('#starttime').text(moment(clickedRouteData.startTime).format('DD-MM-YYYY HH:mm:ss'));
                    $('#endtime').text(moment(clickedRouteData.endTime).format('DD-MM-YYYY HH:mm:ss'));
                    $('#name').text(userData[clickedRouteData.User].name);
                    $('#age').text(getAge(userData[clickedRouteData.User].dateOfBirth) + " (" + userData[clickedRouteData.User].dateOfBirth + ")");

                    nodeString = "";
                    for (index = 0; index < clickedRouteData.Nodes.length; index++) {
                        currNode = clickedRouteData.Nodes[index].CurrentLocation;
                        nodeString += currNode.substring(currNode.indexOf('/') + 1, currNode.length) + ",";
                    }
                    lastNode = clickedRouteData.Nodes[clickedRouteData.Nodes.length - 1].NextLocation;
                    nodeString += lastNode.substring(lastNode.indexOf('/') + 1, lastNode.length);
                    $('#nodes').text(nodeString);

                    beaconString = "";
                    for (index = 0; index < clickedRouteData.Beacons.length; index++) {
                        beaconString += clickedRouteData.Beacons[index] + ",";
                    }
                    beaconString = beaconString.substring(0, beaconString.length - 1);
                    $('#beacons').text(beaconString);

                    $('#routeNodes').DataTable({
                        data: clickedRouteData.Nodes,
                        columns: [
                            { data: 'CurrentLocation', title: 'Current' },
                            { data: 'NextLocation', title: 'Next' },
                            {
                                data: 'TimeStamp', render: function (data, type, row) {
                                    return moment(data).format('HH:mm:ss');
                                }, title: 'Start Time'
                            },
                            {
                                data: null, render: function (data, type, full, meta) {
                                    startTime = moment(clickedRouteData.Nodes[meta.row].TimeStamp);
                                    if (meta.row != clickedRouteData.Nodes.length - 1) {
                                        //take the time stamp from the next node
                                        endTime = moment(clickedRouteData.Nodes[meta.row + 1].TimeStamp);
                                    }
                                    else {
                                        //if there is no more next node, take the time from end time
                                        endTime = moment(clickedRouteData.endTime);
                                    }
                                    duration = moment.duration(endTime.diff(startTime));

                                    return parseInt(duration.asMinutes()) + "m " + parseInt(duration.asSeconds() % 60) + "s"
                                }, title: 'Duration'
                            },
                        ],
                        searching: false,
                        paging: false,
                        bInfo: false,
                        ordering: false
                    });

                    //Node line chart
                    console.log(clickedRouteData);
                    var nodeData = [[clickedRouteData.Origin, 0]];
                    for (index = 0; index < clickedRouteData.Nodes.length; index++) {
                        startTime = moment(clickedRouteData.Nodes[index].TimeStamp);
                        if (index != clickedRouteData.Nodes.length - 1) {
                            //take the time stamp from the next node
                            endTime = moment(clickedRouteData.Nodes[index + 1].TimeStamp);
                        }
                        else {
                            //if there is no more next node, take the time from end time
                            endTime = moment(clickedRouteData.endTime);
                        }
                        duration = moment.duration(endTime.diff(startTime));

                        nodeData.push([clickedRouteData.Nodes[index].NextLocation, parseInt(duration.asSeconds())]);
                    }
                    var nodeChartData = new google.visualization.DataTable();
                    nodeChartData.addColumn('string', 'beacon');
                    nodeChartData.addColumn('number', 'Seconds');
                    nodeChartData.addRows(nodeData);
                    var nodeChart = new google.visualization.LineChart(document.getElementById('nodechart'));
                    nodeChart.draw(nodeChartData, {legend:{position:'none'}});

                    hideAjaxLoading();
                },
                buttons: {
                    close: {
                        text: 'Close',
                        btnClass: 'btn btn-link'
                    }
                },
                backgroundDismiss: true
            });
        });

        //INITALIZE BAR CHART
        barChartData = google.visualization.arrayToDataTable(loadBarChartData(requestedData));
        barchart = new google.visualization.ColumnChart(document.getElementById("barchart"));
        barchart.draw(barChartData, barOptions);
    }

    function redrawChart(startDate, endDate) {
        var differenceDay = moment(endDate).diff(moment(startDate), 'days');

        if (differenceDay == 0) {
            options.hAxis.viewWindow.min = new Date(startDate.getFullYear(), startDate.getMonth(), startDate.getDate(), 0);
            options.hAxis.viewWindow.max = new Date(startDate.getFullYear(), startDate.getMonth(), startDate.getDate(), 24);
        }
        else {
            options.hAxis.viewWindow.min = new Date(startDate.getFullYear(), startDate.getMonth(), startDate.getDate(), 0);
            options.hAxis.viewWindow.max = new Date(endDate.getFullYear(), endDate.getMonth(), endDate.getDate(), 24);
        }

        chart.draw(routeData, options);
        reloadTableAndBar();
    }

    function loadTableData() {
        var startDate = $('#inputDateStart').datepicker('getDate');
        var endDate = $('#inputDateEnd').datepicker('getDate');
        //Pick dates where the picker has requested
        requestedData = [];
        for (index = 0; index < timestampData.length; index++) {
            oneRoute = timestampData[index];
            if (new Date(startDate.getFullYear(), startDate.getMonth(), startDate.getDate(), 0) < moment(oneRoute.startTime) && new Date(endDate.getFullYear(), endDate.getMonth(), endDate.getDate(), 24) > moment(oneRoute.startTime)) {
                requestedData.push(oneRoute);
            }
        }
        return requestedData;
    }

    //Taking from the requested Data, check all the user dob, then categorise them by their age group, <18, 18-30, 31-50, >50
    //fail is [0], success is [1]
    function loadBarChartData(requestedData) {
        var barChartData = [['Age', 'Incompleted', 'Completed'], ['<18', 0, 0], ['18-30', 0, 0], ['31-50', 0, 0], ['>50', 0, 0]];
        for (index = 0; index < requestedData.length; index++) {
            age = getAge(userData[requestedData[index].User].dateOfBirth);
            if (age < 18) {
                barChartData[1][requestedData[index].routeCompleted ? 2 : 1] += 1;
            }
            else if (age >= 18 && age <= 30) {
                barChartData[2][requestedData[index].routeCompleted ? 2 : 1] += 1;
            }
            else if (age >= 31 && age <= 50) {
                barChartData[3][requestedData[index].routeCompleted ? 2 : 1] += 1;
            }
            else if (age > 50) {
                barChartData[4][requestedData[index].routeCompleted ? 2 : 1] += 1;
            }
        }
        return barChartData;
    }

    function reloadTableAndBar() {
        //TABLE
        var newData = loadTableData();
        $('#routeTable').dataTable().api().clear().rows.add(newData).draw();

        //BAR CHART
        barchart.draw(google.visualization.arrayToDataTable(loadBarChartData(newData)), barOptions);
    }

    //get age from user's dob
    function getAge(dob) {
        //age difference in milliseconds
        var ageDifMs = Date.now() - moment(dob, 'YYYY-MM-DD');
        var ageDate = new Date(ageDifMs);
        return Math.abs(ageDate.getUTCFullYear() - 1970);
    }
</script>